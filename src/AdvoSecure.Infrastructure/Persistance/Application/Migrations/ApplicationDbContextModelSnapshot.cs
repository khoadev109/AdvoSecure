// <auto-generated />
using System;
using AdvoSecure.Infrastructure.Persistance.App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdvoSecure.Infrastructure.Persistance.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdvoSecure.Domain.Entities.BillingEntities.BillingRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BillingRates");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.ContactEntities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1AddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressCountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressHouseNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressHouseNoExt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressPostOfficeBox")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressStateOrProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address1DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressCountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressHouseNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressHouseNoExt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressPostOfficeBox")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressStateOrProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressCountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressHouseNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressHouseNoExt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressPostOfficeBox")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressPostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressStateOrProvince")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address3DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssistantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BarNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BicCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BillingRateId")
                        .HasColumnType("integer");

                    b.Property<string>("BirthCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BusinessHomePage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessRegistration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CivilStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayNamePrefix")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email1DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email1EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email2DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email2EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email3DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email3EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax1DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax1FaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax2DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax2FaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax3DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax3FaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("IdDateExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstantMessagingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOurEmployee")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LegalForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NumEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalHomePage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PictureBin")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferredByName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Saluation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SbiCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SepaMandateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("SepaMandateLimit")
                        .HasColumnType("smallint");

                    b.Property<string>("SepaMandateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpouseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone10DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone10TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone1DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone1TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone2DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone2TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone3DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone3TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone4DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone4TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone5DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone5TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone6DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone6TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone7DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone7TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone8DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone8TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone9DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone9TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TurnOver")
                        .HasColumnType("integer");

                    b.Property<string>("VNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Wedding")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.ContactEntities.ContactCivilStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactCivilStatuses", (string)null);
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.ContactEntities.ContactIdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactIdTypes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alpha3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_de")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_en")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_es")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_fr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_it")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyIso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EuMember")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneIso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ibancheck")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ibancode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ibanlen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sepa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AdvoSecure.Security.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
