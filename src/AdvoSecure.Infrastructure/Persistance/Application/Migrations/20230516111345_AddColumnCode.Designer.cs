// <auto-generated />
using System;
using AdvoSecure.Infrastructure.Persistance.App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdvoSecure.Infrastructure.Persistance.Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230516111345_AddColumnCode")]
    partial class AddColumnCode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.BillingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("BillToContactId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NextRun")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BillToContactId");

                    b.ToTable("BillingGroups");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.BillingRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BillingRates");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Incurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Incurred")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BillToId")
                        .HasColumnType("integer");

                    b.Property<string>("BillTo_AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillTo_AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillTo_City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillTo_NameLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillTo_NameLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillTo_State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillTo_Zip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BillingGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Due")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MatterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BillToId");

                    b.HasIndex("BillingGroupId");

                    b.HasIndex("MatterId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.InvoiceExpense", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("InvoiceId", "ExpenseId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("InvoiceExpenses");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.InvoiceFee", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.HasKey("InvoiceId", "FeeId");

                    b.HasIndex("FeeId");

                    b.ToTable("InvoiceFees");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.InvoiceTime", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.HasKey("InvoiceId", "TimeId");

                    b.HasIndex("TimeId");

                    b.ToTable("InvoiceTimes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.CompanyLegalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyLegalStatuses");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1AddressCity")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressHouseNo")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressHouseNoExt")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressPostOfficeBox")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("Address1AddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("Address1DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressCity")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressHouseNo")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressHouseNoExt")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressPostOfficeBox")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("Address2AddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("Address2DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressCity")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressCountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressHouseNo")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressHouseNoExt")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressPostOfficeBox")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressStateOrProvince")
                        .HasColumnType("text");

                    b.Property<string>("Address3AddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("Address3DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("AssistantName")
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BarNumber")
                        .HasColumnType("text");

                    b.Property<string>("BicCode")
                        .HasColumnType("text");

                    b.Property<int?>("BillingRateId")
                        .HasColumnType("integer");

                    b.Property<string>("BirthCity")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BusinessHomePage")
                        .HasColumnType("text");

                    b.Property<string>("BusinessRegistration")
                        .HasColumnType("text");

                    b.Property<int?>("CivilStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int?>("CompanyLegalStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayNamePrefix")
                        .HasColumnType("text");

                    b.Property<string>("Email1DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email1EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Email2DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email2EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Email3DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email3EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Fax1DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Fax1FaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("Fax2DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Fax2FaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("Fax3DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Fax3FaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Generation")
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IdDateExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<int?>("IdTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Initials")
                        .HasColumnType("text");

                    b.Property<string>("InstantMessagingAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsOrganization")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOurEmployee")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("LegalForm")
                        .HasColumnType("text");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text");

                    b.Property<int?>("MatterTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnType("text");

                    b.Property<int?>("NumEmployees")
                        .HasColumnType("integer");

                    b.Property<string>("OfficeLocation")
                        .HasColumnType("text");

                    b.Property<string>("PersonalHomePage")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<byte[]>("PictureBin")
                        .HasColumnType("bytea");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("ReferredByName")
                        .HasColumnType("text");

                    b.Property<string>("Saluation")
                        .HasColumnType("text");

                    b.Property<string>("SbiCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SepaMandateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("SepaMandateLimit")
                        .HasColumnType("smallint");

                    b.Property<string>("SepaMandateNumber")
                        .HasColumnType("text");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpouseName")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone10DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone10TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone1DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone1TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone2DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone2TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone3DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone3TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone4DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone4TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone5DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone5TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone6DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone6TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone7DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone7TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone8DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone8TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Telephone9DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Telephone9TelephoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("TurnOver")
                        .HasColumnType("integer");

                    b.Property<string>("VNumber")
                        .HasColumnType("text");

                    b.Property<string>("VatId")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Wedding")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BillingRateId");

                    b.HasIndex("CivilStatusId");

                    b.HasIndex("CompanyLegalStatusId");

                    b.HasIndex("IdTypeId");

                    b.HasIndex("MatterTypeId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.ContactCivilStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactCivilStatuses");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.ContactIdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactIdTypes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.ContactTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Saluation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactTitles");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Alpha3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_de")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_en")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_es")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_fr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_it")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName_nl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrencyIso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EuMember")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneIso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ibancheck")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ibancode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ibanlen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sepa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Alpha3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleDe")
                        .HasColumnType("text");

                    b.Property<string>("TitleEn")
                        .HasColumnType("text");

                    b.Property<string>("TitleEs")
                        .HasColumnType("text");

                    b.Property<string>("TitleFr")
                        .HasColumnType("text");

                    b.Property<string>("TitleIt")
                        .HasColumnType("text");

                    b.Property<string>("TitleNl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.Lead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FeeId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("FeeId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsEligible")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Paid")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ToId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToId");

                    b.ToTable("LeadFees");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalData2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalQuestion1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdditionalQuestion2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("TypeId");

                    b.ToTable("LeadSources");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LeadSourceTypes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LeadStatuses");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.CourtGeoJurisdiction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourtGeoJurisdictions");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.CourtSittingInCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourtSittingInCities");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.Matter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AttorneyForPartyTitle")
                        .HasColumnType("text");

                    b.Property<string>("BillToContactDisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BillToContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("BillingGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("CaptionOtherPartyLong")
                        .HasColumnType("text");

                    b.Property<string>("CaptionOtherPartyRegular")
                        .HasColumnType("text");

                    b.Property<string>("CaptionOtherPartyShort")
                        .HasColumnType("text");

                    b.Property<string>("CaptionPlaintiffOrSubjectLong")
                        .HasColumnType("text");

                    b.Property<string>("CaptionPlaintiffOrSubjectRegular")
                        .HasColumnType("text");

                    b.Property<string>("CaptionPlaintiffOrSubjectShort")
                        .HasColumnType("text");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("text");

                    b.Property<int?>("CourtGeoJurisdictionId")
                        .HasColumnType("integer");

                    b.Property<int?>("CourtSittingInCityId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefaultBillingRateId")
                        .HasColumnType("integer");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatedCharge")
                        .HasColumnType("numeric");

                    b.Property<long?>("IdInt")
                        .HasColumnType("bigint");

                    b.Property<int?>("MatterAreaId")
                        .HasColumnType("integer");

                    b.Property<string>("MatterNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MatterTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaximumCharge")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinimumCharge")
                        .HasColumnType("numeric");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("OverrideMatterRateWithEmployeeRate")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BillToContactId");

                    b.HasIndex("BillingGroupId");

                    b.HasIndex("CourtGeoJurisdictionId");

                    b.HasIndex("CourtSittingInCityId");

                    b.HasIndex("DefaultBillingRateId");

                    b.HasIndex("MatterAreaId");

                    b.HasIndex("MatterTypeId");

                    b.ToTable("Matters");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.MatterArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AreaGroup")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MatterAreas");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.MatterContact", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MatterId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAppointed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAttorney")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClientContact")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsJudge")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLeadAttorney")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsParty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSupportStaff")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThirdPartyPayor")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWitness")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PartyTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactId", "MatterId");

                    b.HasIndex("MatterId");

                    b.ToTable("MatterContacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.MatterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MatterTypes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Notes.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Notes.NoteNotification", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Cleared")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteNotifications");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Opportunities.Opportunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Closed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("MatterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Probability")
                        .HasColumnType("numeric");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LeadId");

                    b.HasIndex("MatterId");

                    b.HasIndex("StageId");

                    b.ToTable("Opportunity");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Opportunities.OpportunityContact", b =>
                {
                    b.Property<long>("OpportunityId")
                        .HasColumnType("bigint");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.HasKey("OpportunityId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("OpportunityContacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Opportunities.OpportunityStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OpportunityStage");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tagging.TagBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TagCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagCategoryId");

                    b.ToTable("TagBase");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tagging.TagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TagCategory");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.InnerTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ActualEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompletePercentage")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGroupingTask")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProjectedEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProjectedStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SequentialPredecessorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SequentialPredecessorId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.TaskAssignedContact", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("integer");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContactId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignedContacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Timing.Time", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Billable")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Stop")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TimeCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerContactId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimeCategoryId");

                    b.HasIndex("WorkerContactId");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Timing.TimeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeCategory");
                });

            modelBuilder.Entity("AdvoSecure.Security.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserIdentifier")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExpenseMatter", b =>
                {
                    b.Property<Guid>("ExpensesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MattersId")
                        .HasColumnType("uuid");

                    b.HasKey("ExpensesId", "MattersId");

                    b.HasIndex("MattersId");

                    b.ToTable("ExpenseMatter");
                });

            modelBuilder.Entity("FeeMatter", b =>
                {
                    b.Property<Guid>("FeesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MattersId")
                        .HasColumnType("uuid");

                    b.HasKey("FeesId", "MattersId");

                    b.HasIndex("MattersId");

                    b.ToTable("FeeMatter");
                });

            modelBuilder.Entity("InnerTaskMatter", b =>
                {
                    b.Property<Guid>("MattersId")
                        .HasColumnType("uuid");

                    b.Property<long>("TasksId")
                        .HasColumnType("bigint");

                    b.HasKey("MattersId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("InnerTaskMatter");
                });

            modelBuilder.Entity("InnerTaskNote", b =>
                {
                    b.Property<Guid>("NotesId")
                        .HasColumnType("uuid");

                    b.Property<long>("TasksId")
                        .HasColumnType("bigint");

                    b.HasKey("NotesId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("InnerTaskNote");
                });

            modelBuilder.Entity("InnerTaskTagBase", b =>
                {
                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.Property<long>("TasksId")
                        .HasColumnType("bigint");

                    b.HasKey("TagsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("InnerTaskTagBase");
                });

            modelBuilder.Entity("InnerTaskTime", b =>
                {
                    b.Property<long>("TasksId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TimesId")
                        .HasColumnType("uuid");

                    b.HasKey("TasksId", "TimesId");

                    b.HasIndex("TimesId");

                    b.ToTable("InnerTaskTime");
                });

            modelBuilder.Entity("MatterNote", b =>
                {
                    b.Property<Guid>("MattersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NotesId")
                        .HasColumnType("uuid");

                    b.HasKey("MattersId", "NotesId");

                    b.HasIndex("NotesId");

                    b.ToTable("MatterNote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.BillingGroup", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "BillToContact")
                        .WithMany("BillingGroups")
                        .HasForeignKey("BillToContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillToContact");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Invoice", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "BillTo")
                        .WithMany("Invoices")
                        .HasForeignKey("BillToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Billings.BillingGroup", "BillingGroup")
                        .WithMany("Invoices")
                        .HasForeignKey("BillingGroupId");

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", "Matter")
                        .WithMany("Invoices")
                        .HasForeignKey("MatterId");

                    b.Navigation("BillTo");

                    b.Navigation("BillingGroup");

                    b.Navigation("Matter");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.InvoiceExpense", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Expense", "Expense")
                        .WithMany("InvoiceExpenses")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Invoice", "Invoice")
                        .WithMany("InvoiceExpenses")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.InvoiceFee", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Fee", "Fee")
                        .WithMany("InvoiceFees")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Invoice", "Invoice")
                        .WithMany("InvoiceFees")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fee");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.InvoiceTime", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Invoice", "Invoice")
                        .WithMany("InvoiceTimes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Timing.Time", "Time")
                        .WithMany("InvoiceTimes")
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.Contact", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Billings.BillingRate", "BillingRate")
                        .WithMany("Contacts")
                        .HasForeignKey("BillingRateId");

                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.ContactCivilStatus", "CivilStatus")
                        .WithMany("Contacts")
                        .HasForeignKey("CivilStatusId");

                    b.HasOne("AdvoSecure.Domain.Entities.CompanyLegalStatus", "CompanyLegalStatus")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyLegalStatusId");

                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.ContactIdType", "IdType")
                        .WithMany("Contacts")
                        .HasForeignKey("IdTypeId");

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.MatterType", null)
                        .WithMany("Contacts")
                        .HasForeignKey("MatterTypeId");

                    b.Navigation("BillingRate");

                    b.Navigation("CivilStatus");

                    b.Navigation("CompanyLegalStatus");

                    b.Navigation("IdType");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.Lead", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("Leads")
                        .HasForeignKey("ContactId");

                    b.HasOne("AdvoSecure.Domain.Entities.Leads.LeadFee", "Fee")
                        .WithMany("Leads")
                        .HasForeignKey("FeeId");

                    b.HasOne("AdvoSecure.Domain.Entities.Leads.LeadSource", "Source")
                        .WithMany("Leads")
                        .HasForeignKey("SourceId");

                    b.HasOne("AdvoSecure.Domain.Entities.Leads.LeadStatus", "Status")
                        .WithMany("Leads")
                        .HasForeignKey("StatusId");

                    b.Navigation("Contact");

                    b.Navigation("Fee");

                    b.Navigation("Source");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadFee", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "To")
                        .WithMany("LeadFees")
                        .HasForeignKey("ToId");

                    b.Navigation("To");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadSource", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("LeadSources")
                        .HasForeignKey("ContactId");

                    b.HasOne("AdvoSecure.Domain.Entities.Leads.LeadSourceType", "Type")
                        .WithMany("Sources")
                        .HasForeignKey("TypeId");

                    b.Navigation("Contact");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.Matter", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "BillToContact")
                        .WithMany()
                        .HasForeignKey("BillToContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Billings.BillingGroup", "BillingGroup")
                        .WithMany()
                        .HasForeignKey("BillingGroupId");

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.CourtGeoJurisdiction", "CourtGeoJurisdiction")
                        .WithMany("Matters")
                        .HasForeignKey("CourtGeoJurisdictionId");

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.CourtSittingInCity", "CourtSittingInCity")
                        .WithMany("Matters")
                        .HasForeignKey("CourtSittingInCityId");

                    b.HasOne("AdvoSecure.Domain.Entities.Billings.BillingRate", "DefaultBillingRate")
                        .WithMany("Matters")
                        .HasForeignKey("DefaultBillingRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.MatterArea", "MatterArea")
                        .WithMany("Matters")
                        .HasForeignKey("MatterAreaId");

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.MatterType", "MatterType")
                        .WithMany()
                        .HasForeignKey("MatterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillToContact");

                    b.Navigation("BillingGroup");

                    b.Navigation("CourtGeoJurisdiction");

                    b.Navigation("CourtSittingInCity");

                    b.Navigation("DefaultBillingRate");

                    b.Navigation("MatterArea");

                    b.Navigation("MatterType");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.MatterContact", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("MatterContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", "Matter")
                        .WithMany("MatterContacts")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Matter");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Notes.NoteNotification", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("NoteNotifications")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Notes.Note", "Note")
                        .WithMany("NoteNotifications")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Opportunities.Opportunity", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Account")
                        .WithMany("AccountOpportunities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", "Matter")
                        .WithMany()
                        .HasForeignKey("MatterId");

                    b.HasOne("AdvoSecure.Domain.Entities.Opportunities.OpportunityStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId");

                    b.Navigation("Account");

                    b.Navigation("Lead");

                    b.Navigation("Matter");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Opportunities.OpportunityContact", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("OpportunityContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Opportunities.Opportunity", "Opportunity")
                        .WithMany("OpportunityContacts")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tagging.TagBase", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Tagging.TagCategory", "TagCategory")
                        .WithMany("TagBases")
                        .HasForeignKey("TagCategoryId");

                    b.Navigation("TagCategory");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.InnerTask", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.InnerTask", "SequentialPredecessor")
                        .WithMany()
                        .HasForeignKey("SequentialPredecessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId");

                    b.Navigation("SequentialPredecessor");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.TaskAssignedContact", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "Contact")
                        .WithMany("TaskAssignedContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.InnerTask", "Task")
                        .WithMany("TaskAssignedContacts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Timing.Time", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Timing.TimeCategory", "TimeCategory")
                        .WithMany("Times")
                        .HasForeignKey("TimeCategoryId");

                    b.HasOne("AdvoSecure.Domain.Entities.Contacts.Contact", "WorkerContact")
                        .WithMany("Times")
                        .HasForeignKey("WorkerContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeCategory");

                    b.Navigation("WorkerContact");
                });

            modelBuilder.Entity("ExpenseMatter", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Expense", null)
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", null)
                        .WithMany()
                        .HasForeignKey("MattersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeeMatter", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Billings.Fee", null)
                        .WithMany()
                        .HasForeignKey("FeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", null)
                        .WithMany()
                        .HasForeignKey("MattersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerTaskMatter", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", null)
                        .WithMany()
                        .HasForeignKey("MattersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.InnerTask", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerTaskNote", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Notes.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.InnerTask", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerTaskTagBase", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Tagging.TagBase", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.InnerTask", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerTaskTime", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Tasks.InnerTask", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Timing.Time", null)
                        .WithMany()
                        .HasForeignKey("TimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MatterNote", b =>
                {
                    b.HasOne("AdvoSecure.Domain.Entities.Matters.Matter", null)
                        .WithMany()
                        .HasForeignKey("MattersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Domain.Entities.Notes.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdvoSecure.Security.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.BillingGroup", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.BillingRate", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Matters");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Expense", b =>
                {
                    b.Navigation("InvoiceExpenses");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Fee", b =>
                {
                    b.Navigation("InvoiceFees");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Billings.Invoice", b =>
                {
                    b.Navigation("InvoiceExpenses");

                    b.Navigation("InvoiceFees");

                    b.Navigation("InvoiceTimes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.CompanyLegalStatus", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.Contact", b =>
                {
                    b.Navigation("AccountOpportunities");

                    b.Navigation("BillingGroups");

                    b.Navigation("Invoices");

                    b.Navigation("LeadFees");

                    b.Navigation("LeadSources");

                    b.Navigation("Leads");

                    b.Navigation("MatterContacts");

                    b.Navigation("NoteNotifications");

                    b.Navigation("OpportunityContacts");

                    b.Navigation("TaskAssignedContacts");

                    b.Navigation("Times");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.ContactCivilStatus", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Contacts.ContactIdType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadFee", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadSource", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadSourceType", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Leads.LeadStatus", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.CourtGeoJurisdiction", b =>
                {
                    b.Navigation("Matters");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.CourtSittingInCity", b =>
                {
                    b.Navigation("Matters");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.Matter", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MatterContacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.MatterArea", b =>
                {
                    b.Navigation("Matters");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Matters.MatterType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Notes.Note", b =>
                {
                    b.Navigation("NoteNotifications");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Opportunities.Opportunity", b =>
                {
                    b.Navigation("OpportunityContacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tagging.TagCategory", b =>
                {
                    b.Navigation("TagBases");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.InnerTask", b =>
                {
                    b.Navigation("TaskAssignedContacts");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Tasks.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Timing.Time", b =>
                {
                    b.Navigation("InvoiceTimes");
                });

            modelBuilder.Entity("AdvoSecure.Domain.Entities.Timing.TimeCategory", b =>
                {
                    b.Navigation("Times");
                });
#pragma warning restore 612, 618
        }
    }
}
